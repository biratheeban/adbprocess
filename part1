
def get_android_app_info(package_name):
    try:
        process_result = subprocess.run(
            ["adb", "shell", f"ps -A | grep {package_name}"],
            capture_output=True,
            text=True,
            shell=True
        )

        if process_result.returncode != 0 or not process_result.stdout.strip():
            print(f"No process found for package: {package_name}")
            return None


        process_line = process_result.stdout.strip().splitlines()[0]
        process_info = process_line.split()
        pid = process_info[1]  
        app_name = process_info[-1]  

        meminfo_result = subprocess.run(
            ["adb", "shell", f"dumpsys meminfo {package_name}"],
            capture_output=True,
            text=True
        )

        if meminfo_result.returncode != 0 or not meminfo_result.stdout.strip():
            print(f"No memory info available for package: {package_name}")
            return {"pid": pid, "name": app_name, "memory_data": {}}

        memory_data = {}
        in_app_summary = False
        for line in meminfo_result.stdout.splitlines():
            line = line.strip()

            if line.startswith("App Summary"):
                in_app_summary = True
                continue

            if in_app_summary:
                if line.startswith("TOTAL"):
                    break
                parts = line.split()
                if len(parts) >= 2:
                    key = parts[0].replace(":", "").strip()
                    try:
                        value = int(parts[-2].replace("kB", "").strip())  # Memory value in kB
                        memory_data[key] = value
                    except ValueError:
                        continue

            if any(key in line for key in ["Native Heap", "Dalvik Heap", "Graphics", "Stack", "TOTAL"]):
                parts = line.split()
                try:
                    key = parts[0].replace(":", "").strip()
                    value = int(parts[-2].replace("kB", "").strip())  # Memory value in kB
                    memory_data[key] = value
                except (ValueError, IndexError):
                    continue

        return {
            "pid": pid,
            "name": app_name,
            "memory_data": memory_data
        }

    except Exception as e:
        print(f"Error fetching app info for {package_name}: {e}")
        return None